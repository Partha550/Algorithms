from urllib.request import Request, urlopen
import json

X = "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"
Y = "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"
data = {"X": X, "Y": Y}
data = json.dumps(data).encode("ascii")
headers = {"Content-Type": "application/json"}
#  request = Request("http://127.0.0.1:6688", data=data, method="POST", headers=headers)
request = Request("http://127.0.0.1:6688/subsequencematch", data=data, method="GET", headers=headers)
print(request.full_url)
with urlopen(request) as response:
    json_response = json.load(response)
print(json_response)
